y = c(smu(1, 0, 0, 0)[["y"]], smu(0, 0, 0, 1)[["y"]]),
z = c(smu(1, 0, 0, 0)[["z"]], smu(0, 0, 0, 1)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 0, 0, 1)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(0, 0, 0, 1)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(0, 0, 0, 1)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(1, 0, 0, 0)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(1, 0, 0, 0)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(1, 0, 0, 0)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(0, 0, 0, 1)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(0, 0, 0, 1)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(0, 0, 0, 1)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(1, 0, 0, 0)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(1, 0, 0, 0)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(1, 0, 0, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::text3d(x = smu(1, 0, 0, 0)[["x"]], y = smu(1, 0, 0, 0)[["y"]],
z = smu(1, 0, 0, 0)[["z"]], texts = vnames[[1]], cex = 1, adj = c(0,
0))
rgl::text3d(x = smu(0, 1, 0, 0)[["x"]], y = smu(0, 1, 0, 0)[["y"]],
z = smu(0, 1, 0, 0)[["z"]], texts = vnames[[2]], cex = 1, adj = c(1,
1))
rgl::text3d(x = smu(0, 0, 1, 0)[["x"]], y = smu(0, 0, 1, 0)[["y"]],
z = smu(0, 0, 1, 0)[["z"]], texts = vnames[[3]], cex = 1, adj = c(1,
1))
rgl::text3d(x = smu(0, 0, 0, 1)[["x"]], y = smu(0, 0, 0, 1)[["y"]],
z = smu(0, 0, 0, 1)[["z"]], texts = vnames[[4]], cex = 1, adj = c(1,
1))
if (vectors == TRUE) {
rgl::arrow3d(p0=c(0,0,0),p1=smu(1, 0, 0, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 1, 0, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 0, 1, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 0, 0, 1), width = 1/3, s=1/6)
}
} else {
stop("You need to install rgl to use this function",
call. = FALSE)
}
}
plot3d.colourvision(EMmodel4, s.col = colours, size=4)
attributes(EMmodel4)
attributes(EMmodel4)$n_photor_types
library(colourvision)
data("Rb")
data("D65")
midpoint<-seq(from = 500, to = 600, 10)
W<-seq(300, 700, 1)
R<-data.frame(W)
for (i in 1:length(midpoint)) {
R[,i+1]<-logistic(x = seq(300, 700, 1), x0=midpoint[[i]], L = 70, k=0.04)[,2]+5
}
names(R)[2:ncol(R)]<-midpoint
EMmodel4<-EMmodel(R=R, I=D65, C=photor(c(350,420,490,560),beta.band=FALSE), Rb=Rb)
library(rgl)
colours<-rainbow(n=(ncol(R)-1))
plot3d.colourvision(EMmodel4, s.col = colours, size=4)
smu <- function(s, m, u, l) {
x <- ((1 - 2 * s - m - u)/2) * sqrt(3/2)
y <- (-1 + 3 * m + u)/(2 * sqrt(2))
z <- u - 1/4
r <- c(x, y, z)
names(r) <- c("x", "y", "z")
return(r)
}
x = EMmodel4$X1
y = EMmodel4$X2
z = EMmodel4$X3
s.col = "red"
f.col = "black"
vnames = c("u","s","m","l")
type = "p"
radius = 0.01,
add = F
xlab = ""
ylab = ""
zlab = ""
radius = 0.01
add = F
xlab = ""
ylab = ""
zlab = ""
box = F
axes = F
ylim = c(-0.75, 0.75)
xlim = c(-0.75, 0.75)
zlim = c(-0.75, 0.75)
aspect = T
mar = c(1, 1, 1, 1)
vectors=FALSE
rgl::rgl.viewpoint(zoom = 0.75)
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect, mar = mar)
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect)
x = EMmodel4$X1
y = EMmodel4$X2
z = EMmodel4$X3
s.col = "red"
f.col = "black"
vnames = c("u","s","m","l")
type = "p"
radius = 0.01
add = F
xlab = ""
ylab = ""
zlab = ""
box = F
axes = F
ylim = c(-0.75, 0.75)
xlim = c(-0.75, 0.75)
zlim = c(-0.75, 0.75)
aspect = T
mar = 1
vectors=FALSE
rgl::rgl.viewpoint(zoom = 0.75)
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect, mar = mar)
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect, mar = 1)
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect, mar = c(1,1,1))
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect, mar = c(1,1,1,1))
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect, mar = c(1,1))
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect, mar = 0)
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect)
EMtetrahedron <- function (x, y, z, s.col = "red", f.col = "black", vnames = c("u","s","m","l"),
type = "p", radius = 0.01,
add = F, xlab = "", ylab = "", zlab = "",
box = F, axes = F, ylim = c(-0.75, 0.75), xlim = c(-0.75, 0.75),
zlim = c(-0.75, 0.75), aspect = T, vectors=FALSE, ...)
{
if (requireNamespace("rgl", quietly = TRUE)) {
rgl::rgl.viewpoint(zoom = 0.75)
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect, ...)
smu <- function(s, m, u, l) {
x <- ((1 - 2 * s - m - u)/2) * sqrt(3/2)
y <- (-1 + 3 * m + u)/(2 * sqrt(2))
z <- u - 1/4
r <- c(x, y, z)
names(r) <- c("x", "y", "z")
return(r)
}
rgl::plot3d(x = c(smu(1, 0, 0, 0)[["x"]], smu(0, 0, 0, 1)[["x"]]),
y = c(smu(1, 0, 0, 0)[["y"]], smu(0, 0, 0, 1)[["y"]]),
z = c(smu(1, 0, 0, 0)[["z"]], smu(0, 0, 0, 1)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 0, 0, 1)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(0, 0, 0, 1)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(0, 0, 0, 1)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(1, 0, 0, 0)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(1, 0, 0, 0)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(1, 0, 0, 0)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(0, 0, 0, 1)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(0, 0, 0, 1)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(0, 0, 0, 1)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(1, 0, 0, 0)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(1, 0, 0, 0)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(1, 0, 0, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::text3d(x = smu(1, 0, 0, 0)[["x"]], y = smu(1, 0, 0, 0)[["y"]],
z = smu(1, 0, 0, 0)[["z"]], texts = vnames[[1]], cex = 1, adj = c(0,
0))
rgl::text3d(x = smu(0, 1, 0, 0)[["x"]], y = smu(0, 1, 0, 0)[["y"]],
z = smu(0, 1, 0, 0)[["z"]], texts = vnames[[2]], cex = 1, adj = c(1,
1))
rgl::text3d(x = smu(0, 0, 1, 0)[["x"]], y = smu(0, 0, 1, 0)[["y"]],
z = smu(0, 0, 1, 0)[["z"]], texts = vnames[[3]], cex = 1, adj = c(1,
1))
rgl::text3d(x = smu(0, 0, 0, 1)[["x"]], y = smu(0, 0, 0, 1)[["y"]],
z = smu(0, 0, 0, 1)[["z"]], texts = vnames[[4]], cex = 1, adj = c(1,
1))
if (vectors == TRUE) {
rgl::arrow3d(p0=c(0,0,0),p1=smu(1, 0, 0, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 1, 0, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 0, 1, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 0, 0, 1), width = 1/3, s=1/6)
}
} else {
stop("You need to install rgl to use this function",
call. = FALSE)
}
}
library(colourvision)
data("Rb")
data("D65")
midpoint<-seq(from = 500, to = 600, 10)
W<-seq(300, 700, 1)
R<-data.frame(W)
for (i in 1:length(midpoint)) {
R[,i+1]<-logistic(x = seq(300, 700, 1), x0=midpoint[[i]], L = 70, k=0.04)[,2]+5
}
names(R)[2:ncol(R)]<-midpoint
EMmodel4<-EMmodel(R=R, I=D65, C=photor(c(350,420,490,560),beta.band=FALSE), Rb=Rb)
library(rgl)
colours<-rainbow(n=(ncol(R)-1))
plot3d.colourvision(EMmodel4, s.col = colours, size=4)
attributes(EMmodel4)$n_photor_types
EMtetrahedron <- function (x, y, z, s.col = "red", f.col = "black", vnames = c("u","s","m","l"),
type = "p", radius = 0.01,
add = F, xlab = "", ylab = "", zlab = "",
box = F, axes = F, ylim = c(-0.75, 0.75), xlim = c(-0.75, 0.75),
zlim = c(-0.75, 0.75), aspect = T, vectors=FALSE, ...)
{
if (requireNamespace("rgl", quietly = TRUE)) {
rgl::rgl.viewpoint(zoom = 0.75)
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect, ...)
smu <- function(s, m, u, l) {
x <- ((1 - 2 * s - m - u)/2) * sqrt(3/2)
y <- (-1 + 3 * m + u)/(2 * sqrt(2))
z <- u - 1/4
r <- c(x, y, z)
names(r) <- c("x", "y", "z")
return(r)
}
rgl::plot3d(x = c(smu(1, 0, 0, 0)[["x"]], smu(0, 0, 0, 1)[["x"]]),
y = c(smu(1, 0, 0, 0)[["y"]], smu(0, 0, 0, 1)[["y"]]),
z = c(smu(1, 0, 0, 0)[["z"]], smu(0, 0, 0, 1)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 0, 0, 1)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(0, 0, 0, 1)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(0, 0, 0, 1)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(1, 0, 0, 0)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(1, 0, 0, 0)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(1, 0, 0, 0)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(0, 0, 0, 1)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(0, 0, 0, 1)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(0, 0, 0, 1)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(1, 0, 0, 0)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(1, 0, 0, 0)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(1, 0, 0, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::text3d(x = smu(1, 0, 0, 0)[["x"]], y = smu(1, 0, 0, 0)[["y"]],
z = smu(1, 0, 0, 0)[["z"]], texts = vnames[[1]], cex = 1, adj = c(0,
0))
rgl::text3d(x = smu(0, 1, 0, 0)[["x"]], y = smu(0, 1, 0, 0)[["y"]],
z = smu(0, 1, 0, 0)[["z"]], texts = vnames[[2]], cex = 1, adj = c(1,
1))
rgl::text3d(x = smu(0, 0, 1, 0)[["x"]], y = smu(0, 0, 1, 0)[["y"]],
z = smu(0, 0, 1, 0)[["z"]], texts = vnames[[3]], cex = 1, adj = c(1,
1))
rgl::text3d(x = smu(0, 0, 0, 1)[["x"]], y = smu(0, 0, 0, 1)[["y"]],
z = smu(0, 0, 0, 1)[["z"]], texts = vnames[[4]], cex = 1, adj = c(1,
1))
if (vectors == TRUE) {
rgl::arrow3d(p0=c(0,0,0),p1=smu(1, 0, 0, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 1, 0, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 0, 1, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 0, 0, 1), width = 1/3, s=1/6)
}
} else {
stop("You need to install rgl to use this function",
call. = FALSE)
}
}
plot3d.colourvision(EMmodel4, s.col = colours, size=4)
EMtetrahedron <- function (x, y, z, s.col = "red", f.col = "black", vnames = c("u","s","m","l"),
type = "p", radius = 0.01,
add = F, xlab = "", ylab = "", zlab = "",
box = F, axes = F, ylim = c(-0.75, 0.75), xlim = c(-0.75, 0.75),
zlim = c(-0.75, 0.75), aspect = T, vectors=FALSE, ...)
{
if (requireNamespace("rgl", quietly = TRUE)) {
rgl::rgl.viewpoint(zoom = 0.75)
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect, ...)
smu <- function(s, m, u, l) {
x <- ((1 - 2 * s - m - u)/2) * sqrt(3/2)
y <- (-1 + 3 * m + u)/(2 * sqrt(2))
z <- u - 1/4
r <- c(x, y, z)
names(r) <- c("x", "y", "z")
return(r)
}
rgl::plot3d(x = c(smu(1, 0, 0, 0)[["x"]], smu(0, 0, 0, 1)[["x"]]),
y = c(smu(1, 0, 0, 0)[["y"]], smu(0, 0, 0, 1)[["y"]]),
z = c(smu(1, 0, 0, 0)[["z"]], smu(0, 0, 0, 1)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 0, 0, 1)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(0, 0, 0, 1)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(0, 0, 0, 1)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(1, 0, 0, 0)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(1, 0, 0, 0)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(1, 0, 0, 0)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(0, 0, 0, 1)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(0, 0, 0, 1)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(0, 0, 0, 1)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(1, 0, 0, 0)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(1, 0, 0, 0)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(1, 0, 0, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::text3d(x = smu(1, 0, 0, 0)[["x"]], y = smu(1, 0, 0, 0)[["y"]],
z = smu(1, 0, 0, 0)[["z"]], texts = vnames[[1]], cex = 1, adj = c(0,
0))
rgl::text3d(x = smu(0, 1, 0, 0)[["x"]], y = smu(0, 1, 0, 0)[["y"]],
z = smu(0, 1, 0, 0)[["z"]], texts = vnames[[2]], cex = 1, adj = c(1,
1))
rgl::text3d(x = smu(0, 0, 1, 0)[["x"]], y = smu(0, 0, 1, 0)[["y"]],
z = smu(0, 0, 1, 0)[["z"]], texts = vnames[[3]], cex = 1, adj = c(1,
1))
rgl::text3d(x = smu(0, 0, 0, 1)[["x"]], y = smu(0, 0, 0, 1)[["y"]],
z = smu(0, 0, 0, 1)[["z"]], texts = vnames[[4]], cex = 1, adj = c(1,
1))
if (vectors == TRUE) {
rgl::arrow3d(p0=c(0,0,0),p1=smu(1, 0, 0, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 1, 0, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 0, 1, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 0, 0, 1), width = 1/3, s=1/6)
}
} else {
stop("You need to install rgl to use this function",
call. = FALSE)
}
}
plot3d.colourvision(EMmodel4, s.col = colours, size=4)
plot3dcolourvision <- function (x, ...) {
photo1<-attributes(x)$n_photor_types
if(photo1<=3) {stop("For a 2D plot use 'plot'.")}
if(photo1>4) {stop("Plotting is not available for > 3-dimentions.")}
model<-attributes(x)$model_name
if(model=="RNL Threshold") {stop("For a colour threshold use 'plot'.")}
if (model=="Colour hexagon model") {
if (photo1==4) {
CTTKhexagon3D(x=x[,"X1"],y=x[,"X2"], z=x[,"X3"], ...)
}
}
if (model=="Endler and Mielke model") {
if (photo1==4) {
EMtetrahedron(x=x[,"X1"], y=x[,"X2"], z=x[,"X3"], ...)
}
}
if (model=="Receptor noise limited model") {
if (photo1==4) {
RNLplot3d(model=x, ...)
}
}
if (model=="Generic model") {
if (photo1==4) {
GENplot3d(model=x, ...)
}
}
}
plot3dcolourvision(EMmodel4, s.col = colours, size=4)
library(colourvision)
data("Rb")
data("D65")
midpoint<-seq(from = 500, to = 600, 10)
W<-seq(300, 700, 1)
R<-data.frame(W)
for (i in 1:length(midpoint)) {
R[,i+1]<-logistic(x = seq(300, 700, 1), x0=midpoint[[i]], L = 70, k=0.04)[,2]+5
}
names(R)[2:ncol(R)]<-midpoint
EMmodel4<-EMmodel(R=R, I=D65, C=photor(c(350,420,490,560),beta.band=FALSE), Rb=Rb)
library(rgl)
colours<-rainbow(n=(ncol(R)-1))
plot3dcolourvision <- function (x, ...) {
photo1<-attributes(x)$n_photor_types
if(photo1<=3) {stop("For a 2D plot use 'plot'.")}
if(photo1>4) {stop("Plotting is not available for > 3-dimentions.")}
model<-attributes(x)$model_name
if(model=="RNL Threshold") {stop("For a colour threshold use 'plot'.")}
if (model=="Colour hexagon model") {
if (photo1==4) {
CTTKhexagon3D(x=x[,"X1"],y=x[,"X2"], z=x[,"X3"], ...)
}
}
if (model=="Endler and Mielke model") {
if (photo1==4) {
EMtetrahedron(x=x[,"X1"], y=x[,"X2"], z=x[,"X3"], ...)
}
}
if (model=="Receptor noise limited model") {
if (photo1==4) {
RNLplot3d(model=x, ...)
}
}
if (model=="Generic model") {
if (photo1==4) {
GENplot3d(model=x, ...)
}
}
}
EMtetrahedron <- function (x, y, z, s.col = "red", f.col = "black", vnames = c("u","s","m","l"),
type = "p", radius = 0.01,
add = F, xlab = "", ylab = "", zlab = "",
box = F, axes = F, ylim = c(-0.75, 0.75), xlim = c(-0.75, 0.75),
zlim = c(-0.75, 0.75), aspect = T, vectors=FALSE, ...)
{
if (requireNamespace("rgl", quietly = TRUE)) {
rgl::rgl.viewpoint(zoom = 0.75)
rgl::plot3d(x = x, y = y, z = z, col = s.col, type = type,
add = add, xlab = xlab, ylab = ylab, zlab = zlab, box = box, axes = axes,
radius = radius, ylim = ylim, xlim = xlim,
zlim = zlim, aspect = aspect, ...)
smu <- function(s, m, u, l) {
x <- ((1 - 2 * s - m - u)/2) * sqrt(3/2)
y <- (-1 + 3 * m + u)/(2 * sqrt(2))
z <- u - 1/4
r <- c(x, y, z)
names(r) <- c("x", "y", "z")
return(r)
}
rgl::plot3d(x = c(smu(1, 0, 0, 0)[["x"]], smu(0, 0, 0, 1)[["x"]]),
y = c(smu(1, 0, 0, 0)[["y"]], smu(0, 0, 0, 1)[["y"]]),
z = c(smu(1, 0, 0, 0)[["z"]], smu(0, 0, 0, 1)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 0, 0, 1)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(0, 0, 0, 1)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(0, 0, 0, 1)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(1, 0, 0, 0)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(1, 0, 0, 0)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(1, 0, 0, 0)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(0, 0, 1, 0)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(0, 0, 1, 0)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(0, 0, 1, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(0, 0, 0, 1)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(0, 0, 0, 1)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(0, 0, 0, 1)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::plot3d(x = c(smu(0, 1, 0, 0)[["x"]], smu(1, 0, 0, 0)[["x"]]),
y = c(smu(0, 1, 0, 0)[["y"]], smu(1, 0, 0, 0)[["y"]]),
z = c(smu(0, 1, 0, 0)[["z"]], smu(1, 0, 0, 0)[["z"]]), col = f.col,
type = "l", add = T, lwd = 1)
rgl::text3d(x = smu(1, 0, 0, 0)[["x"]], y = smu(1, 0, 0, 0)[["y"]],
z = smu(1, 0, 0, 0)[["z"]], texts = vnames[[1]], cex = 1, adj = c(0,
0))
rgl::text3d(x = smu(0, 1, 0, 0)[["x"]], y = smu(0, 1, 0, 0)[["y"]],
z = smu(0, 1, 0, 0)[["z"]], texts = vnames[[2]], cex = 1, adj = c(1,
1))
rgl::text3d(x = smu(0, 0, 1, 0)[["x"]], y = smu(0, 0, 1, 0)[["y"]],
z = smu(0, 0, 1, 0)[["z"]], texts = vnames[[3]], cex = 1, adj = c(1,
1))
rgl::text3d(x = smu(0, 0, 0, 1)[["x"]], y = smu(0, 0, 0, 1)[["y"]],
z = smu(0, 0, 0, 1)[["z"]], texts = vnames[[4]], cex = 1, adj = c(1,
1))
if (vectors == TRUE) {
rgl::arrow3d(p0=c(0,0,0),p1=smu(1, 0, 0, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 1, 0, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 0, 1, 0), width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=smu(0, 0, 0, 1), width = 1/3, s=1/6)
}
} else {
stop("You need to install rgl to use this function",
call. = FALSE)
}
}
plot3dcolourvision(EMmodel4, s.col = colours, size=4)
library(colourvision)
?noise_e
library(colourvision)
?noise_e
