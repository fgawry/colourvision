panel.first ={
if (vectors == TRUE) {
arrows(x0=0,y0=0,x1=cs.vsize$vector_matrix[1,1], y1=cs.vsize$vector_matrix[2,1], length = 0.10)
arrows(x0=0,y0=0,x1=cs.vsize$vector_matrix[1,2], y1=cs.vsize$vector_matrix[2,2], length = 0.10)
arrows(x0=0,y0=0,x1=cs.vsize$vector_matrix[1,3], y1=cs.vsize$vector_matrix[2,3], length = 0.10)
}
},
...)
if (vnames == TRUE) {
text(pos=1, x=cs.vsize$vector_matrix[1,1], y=cs.vsize$vector_matrix[2,1], labels="E1")
text(pos=1, x=cs.vsize$vector_matrix[1,2], y=cs.vsize$vector_matrix[2,2], labels="E2")
text(pos=3, x=cs.vsize$vector_matrix[1,3], y=cs.vsize$vector_matrix[2,3], labels="E3")
}
}
}
RNLplot3d<-function(model, item="R1",
vectors=TRUE, vnames=TRUE, vsize="auto",
xlab="x", ylab="y", zlab="z",
xlim="auto", ylim="auto", zlim="auto", asp=1, ...) {
if(item=="R1"){col.names<-c("X1_R1","X2_R1","X3_R1")}
if(item=="R2"){col.names<-c("X1_R2","X2_R2","X3_R2")}
if (attributes(model)$coord!="colourvision" && vectors==TRUE) {
warning("Vector plotting is available only for colour locus coordinates calculted by Gawryszewski (2018) method.")
vectors<-FALSE
vnames<-FALSE
}
GENplot3d(model=model, col.names=col.names,
vectors=vectors, vnames=vnames, vsize=vsize,
xlab=xlab, ylab=ylab, zlab=zlab,
xlim=xlim, ylim=ylim, zlim=zlim, asp=asp, ...)
}
GENplot3d<-function(model, col.names=c("X1","X2","X3"),
vectors=TRUE, vnames=TRUE, vsize="auto",
xlab="x", ylab="y", zlab="z",
xlim="auto", ylim="auto", zlim="auto", asp=1, ...) {
if (requireNamespace("rgl", quietly = TRUE)) {
x<-model
X1<-x[,col.names[[1]]]
X2<-x[,col.names[[2]]]
X3<-x[,col.names[[3]]]
lim<-max(abs(c(max(X1, na.rm = TRUE), min(X1, na.rm = TRUE),
max(X2, na.rm = TRUE), min(X2, na.rm = TRUE),
max(X3, na.rm = TRUE), min(X3, na.rm = TRUE))))
if (ylim[[1]]=="auto") {
ylim<-c(-lim,lim)
}
if (xlim[[1]]=="auto") {
xlim<-c(-lim,lim)
}
if (zlim[[1]]=="auto") {
zlim<-c(-lim,lim)
}
if (vsize[[1]]=="auto") {
cs.vsize<-colour_space(n=4, type="length", length=lim*0.7)
}
if (vsize[[1]]!="auto") {
cs.vsize<-colour_space(n=4, type="length", length=vsize)
}
rgl::plot3d(x=X1,y=X2,z=X3,
ylab=ylab, xlab=xlab, zlab=zlab, xlim=xlim, ylim=ylim, zlim=zlim, asp=asp, ...)
if (vectors == TRUE) {
rgl::arrow3d(p0=c(0,0,0),p1=cs.vsize$vector_matrix[,1], width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=cs.vsize$vector_matrix[,2], width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=cs.vsize$vector_matrix[,3], width = 1/3, s=1/6)
rgl::arrow3d(p0=c(0,0,0),p1=cs.vsize$vector_matrix[,4], width = 1/3, s=1/6)
}
if (vnames == TRUE) {
cs<-colour_space(n=4, type="length", length=1)
rgl::text3d(x = cs.vsize$vector_matrix[1,1],
y = cs.vsize$vector_matrix[2,1],
z = cs.vsize$vector_matrix[3,1],
texts = "E1",
cex = 0.75, adj = c(1, 1))
rgl::text3d(x = cs.vsize$vector_matrix[1,2],
y = cs.vsize$vector_matrix[2,2],
z = cs.vsize$vector_matrix[3,2],
texts = "E2",
cex = 0.75, adj = c(1, 1))
rgl::text3d(x = cs.vsize$vector_matrix[1,3],
y = cs.vsize$vector_matrix[2,3],
z = cs.vsize$vector_matrix[3,3],
texts = "E3",
cex = 0.75, adj = c(1, 1))
rgl::text3d(x = cs.vsize$vector_matrix[1,4],
y = cs.vsize$vector_matrix[2,4],
z = cs.vsize$vector_matrix[3,4],
texts = "E4",
cex = 0.75, adj = c(1, 1))
}
} else {
stop("You need to install rgl to use this function",
call. = FALSE)
}
}
plot3d.colourvision <- function (x, ...) {
photo1<-attributes(x)$n_photor_types
if(photo1<=3) {stop("For a 2D plot use 'plot'.")}
if(photo1>4) {stop("Plotting is not available for > 3-dimentions.")}
model<-attributes(x)$model_name
if(model=="RNL Threshold") {stop("For a colour threshold use 'plot'.")}
if (model=="Colour hexagon model") {
if (photo1==4) {
CTTKhexagon3D(x=x[,"X1"],y=x[,"X2"], z=x[,"X3"], ...)
}
}
if (model=="Endler and Mielke model") {
if (photo1==4) {
EMtetrahedron(x=x[,"X1"], y=x[,"X2"], z=x[,"X3"], ...)
}
}
if (model=="Receptor noise limited model") {
if (photo1==4) {
RNLplot3d(model=x, ...)
}
}
if (model=="Generic model") {
if (photo1==4) {
GENplot3d(model=x, ...)
}
}
}
deltaS<-function(model) {
n<-attr(model, "n_photor_types")
col.names<-paste(rep("X",n-1),1:(n-1),sep="")
if (attr(model, "model_name")=="Receptor noise limited model") {
col.names<-paste(rep("X",n-1),1:(n-1),rep("_R1",n-1), sep="")
}
X<-model[,colnames(model)%in%col.names]
X<-data.frame(X)
r<-matrix(ncol=nrow(model),nrow=nrow(model))
colnames(r)<-rownames(model)
rownames(r)<-rownames(model)
for (i in 1:nrow(r)) {
sumX<-rep(0, nrow(X))
for (k in 1:ncol(X)) {
temp<-(X[i,k]-X[,k])^2
sumX<-(temp+sumX)
}
r[,i]  <- sqrt(sumX)
}
return(r)
}
radarplot <- function(model, item=c("Qr", "E"), item.labels=FALSE, item.lwd=1,
border=NULL, radar.lwd=1, radar.col="grey",
length="auto", xlim="auto", ylim="auto",
xlab="", ylab="", asp=1, add = FALSE, ...) {
photo1<-attr(model, "n_photor_types")
model.type<-attr(model, "model_name")
ifelse (test=model.type=="RNL Threshold", yes=stop("radarplot isn't available for RNLthres() model", call. = FALSE), no="")
ifelse (test=photo1==2, yes=stop("radarplot isn't available for dichromatic models", call. = FALSE), no="")
if (item == "Qr") {
col.names<-paste(rep("Qr",photo1),1:photo1,sep="")
if (attr(model, "model_name")=="Receptor noise limited model") {
col.names<-paste(rep("Qr",photo1),1:(photo1),rep("_R1",photo1), sep="")
}
}
if (item == "E") {
col.names<-paste(rep("E",photo1),1:photo1,sep="")
if (attr(model, "model_name")=="Receptor noise limited model") {
col.names<-paste(rep("E",photo1),1:(photo1),rep("_R1",photo1), sep="")
}
}
ifelse (test=any(model[,colnames(model)%in%col.names]<0),
yes=warning("Model has negative photoreceptor values. These values won't be properly represented into a radarplot", call.=FALSE), no="")
colour.matrix<-matrix(ncol=length(col.names),nrow=2)
colour.matrix[1,1]<-0
colour.matrix[2,1]<-1
tetha<-(2*pi)/length(col.names)
for (i in 2:length(col.names)) {
colour.matrix[1,i]<-colour.matrix[1,i-1]*cos(tetha)-colour.matrix[2,i-1]*sin(tetha)
colour.matrix[2,i]<-colour.matrix[1,i-1]*sin(tetha)+colour.matrix[2,i-1]*cos(tetha)
}
max<-length
if(length[[1]]=="auto") {
length.max<-round(max(abs(model[,names(model)%in%col.names]))*1.1,0)
if (model.type == "Colour hexagon model" && item == "E") {
length.max <- 1.0
}
if (model.type == "model_name" && item == "E") {
if (attr(model, "type")=="length") {
length.max <- 0.75
}
if (attr(model, "type")=="edge") {
length.max<-colour_space(n=photo1, type="edge", edge=sqrt(3/2))$vector_matrix
length.max<-sqrt(sum(length.max[,1]^2))
}
}
}
if (xlim[[1]]=="auto") {
max<-round(max(abs(model[,names(model)%in%col.names]))*1.2,0)
xlim<-c(-max,max)
if (model.type == "Colour hexagon model" && item == "E") {
xlim<-c(-1.2,1.2)
}
if (model.type == "model_name" && item == "E") {
if (attr(model, "type")=="length") {
xlim<-c(-1,1)
}
if (attr(model, "type")=="edge") {
length.max<-colour_space(n=photo1, type="edge", edge=sqrt(3/2))$vector_matrix
length.max<-sqrt(sum(length.max[,1]^2))
xlim<-c(-1.2*length.max,length.max*1.2)
}
}
}
if (ylim[[1]]=="auto") {
max<-round(max(abs(model[,names(model)%in%col.names]))*1.2,0)
ylim<-c(-max,max)
if (model.type == "Colour hexagon model" && item == "E") {
ylim<-c(-1.2,1.2)
}
if (model.type == "model_name" && item == "E") {
if (attr(model, "type")=="length") {
ylim<-c(-1,1)
}
if (attr(model, "type")=="edge") {
length.max<-colour_space(n=photo1, type="edge", edge=sqrt(3/2))$vector_matrix
length.max<-sqrt(sum(length.max[,1]^2))
ylim<-c(-1.2*length.max,length.max*1.2)
}
}
}
if (add==FALSE) {
plot(x=0,y=0, ylim=ylim, xlim=xlim, asp=asp, type="n",
xlab=xlab, ylab=ylab, ...)
for (i in 1:ncol(colour.matrix)) {
segments(x0=0,y0=0,x1=colour.matrix[1,i]*length.max,y1=colour.matrix[2,i]*length.max,
col=radar.col, lwd=radar.lwd)
if (item.labels==TRUE) {text(x=colour.matrix[1,i]*length.max,y=colour.matrix[2,i]*length.max, labels=col.names[[i]], cex=0.7)}
}
}
for (i in 1:nrow(model)) {
values<-model[i,names(model)%in%col.names]
matrix.values<-colour.matrix
for (k in 1:ncol(matrix.values)) {
matrix.values[,k]<-colour.matrix[,k]*values[[k]]
}
polygon(x=matrix.values[1,], y=matrix.values[2,], border=border[[i]], lwd=item.lwd)
}
}
RNLachrom <- function(model = c("linear", "log"),
R1, R2=Rb, Rb, I, C, e,
interpolate = TRUE, nm = seq(300, 700, 1)) {
#SEE WEBER CONTRAST IN SONKE JOHNSEN BOOK
#https://academic.oup.com/beheco/article/29/2/273/4560781
photo=1
dependent <- FALSE
nphoto = ncol(C) - 1
photo1<-photo
contrast <- "Weber"
noise <- TRUE
v<-NA
n<-NA
#warnings
ifelse(photo1 != nphoto, yes = warning("Argument 'C' has more than one sensitivity curve. Using only the first one.",
call. = FALSE), no = "")
ifelse(photo1 != length(e) && noise == T,
yes = warning("Argument 'e' has more than one value. Using only the first one.",
call. = FALSE), no = "")
ifelse(photo1 != length(n) && noise == F,
yes = warning("Argument 'n' has a number of parameters different than 'photo'.",
call. = FALSE), no = "")
ifelse(any(ncol(I) > 2), yes = warning("'I' argument with more than two columns. Only the first two will be used.",
call. = FALSE), no = "")
ifelse(any(ncol(Rb) > 2), yes = warning("'Rb' argument with more than two columns. Only the first two will be used.",
call. = FALSE), no = "")
ifelse(any(ncol(R2) > 2), yes = warning("'R2' argument with more than two columns. Only the first two will be used.",
call. = FALSE), no = "")
maxR <- apply(data.frame(R1[, 2:ncol(R1)]), 2, max)
ifelse(any(maxR <= 1) && max(Rb[, 2]) > 1 || any(maxR > 1) && max(Rb[, 2]) <= 1,
yes = warning("There seems to be a problem with input files. 'R1' and 'Rb' must be in the same scale. Both must be either in percentage (0-100%) or proportion (0-1).",
call. = FALSE), no = "")
ifelse(any(maxR <= 1) && max(R2[, 2]) > 1 || any(maxR > 1) && max(R2[, 2]) <= 1,
yes = warning("There seems to be a problem with input files. 'R1' and 'R2' must be in the same scale. Both must be either in percentage (0-100%) or proportion (0-1).",
call. = FALSE), no = "")
if (noise==FALSE&length(n)>1) {
message("More than one estimated noise. The model assumes that noise refers to the most common receptor.")
}
internal <- function(model, photo, R1, R2=Rb, Rb, I, C,
e, interpolate, nm) {
#relative photon catches
S1<-vector(length=photo1)
S2<-vector(length=photo1)
for (i in 1:photo1) {
S1[[i]] <- Qr(I = I, R = R1, Rb = Rb, C = C[, c(1, i+1)], interpolate = interpolate, nm = nm)
S2[[i]] <- Qr(I = I, R = R2, Rb = Rb, C = C[, c(1, i+1)], interpolate = interpolate, nm = nm)
}
S1.Qr<-S1
S2.Qr<-S2
if (model == "log") {
S1 <- log(S1)
S2 <- log(S2)
}
#noise
if (dependent == FALSE) {
noise_values<-noise_e(noise = noise, e = e, v = v, n = n)
noise_values<-noise_values[[1]]
}
#∆fi=ln[qi(spec1)/qi(spec2)] = ln(1+∆qi/qi(spec2)] = ∆qi/qi(spec2)
#(q1/q2 - q2/q2 + 1)
#(q1-q2)/q2 + 1
if (model == "log") {
if (contrast=="Weber") {
delta_f<- S1 - S2
}
if (contrast=="Michelson") {
stop("Michelson contrast not implemented")
}
}
if (model == "linear") {
if (contrast=="Weber") {
delta_f<- (S1 - S2)/S2
}
if (contrast=="Michelson") {
stop("Michelson contrast not implemented")
}
}
#∆S = |∆fi/ω|
if (contrast=="Weber") {
deltaS<-abs(delta_f)/noise_values
}
if (contrast=="Michelson") {
stop("Michelson contrast not implemented")
#deltaS<-abs(delta_f)/noise_values
}
r<-c(noise_values, S1.Qr, S2.Qr, S1, S2, deltaS)
return(r)
}
#apply function for several spectra
n.spectra <- ncol(R1) - 1
R1.list <- vector(length = n.spectra, "list")
for (i in 1:n.spectra) {
R1.list[[i]] <- data.frame(R1[, 1], R1[, i + 1])
}
r <- sapply(X = R1.list, FUN = internal, model = model, photo = photo,
I = I, R2=R2, Rb = Rb, C = C, e = e, interpolate = interpolate, nm = nm)
r <- as.data.frame(t(r))
e_names<-"e1"
Qr_1names<-"Qr1_R1"
Qr_2names<-"Qr1_R2"
E_1names<-"E1_R1"
E_2names<-"E1_R2"
colnames(r) <- c(e_names, Qr_1names, Qr_2names, E_1names, E_2names, "deltaS")
rownames(r) <- names(R1)[2:ncol(R1)]
test1<- r[,c(E_1names, E_2names)]
ifelse(any(test1 < 0), yes = warning("Photoreceptor output < 0.",
call. = FALSE), no = "")
class(r)<-c("colourvision", "data.frame")
attr(r, "model_name") <- "Receptor noise limited model - Achromatic"
attr(r, "model_input_output") <- model
attr(r, "n_photor_types") <- photo1
attr(r, "R2") <- R2
attr(r, "Rb") <- Rb
attr(r, "I") <- I
attr(r, "C") <- C
attr(r, "noise calculated") <- noise
attr(r, "v") <- v
attr(r, "n") <- n
attr(r, "Interpolate") <- interpolate
attr(r, "nm") <- nm
attr(r, "contrast") <- contrast
return(r)
}
#1
## Photoreceptor sensitivity spectra
##with lambda max at 350nm, 450nm and 550nm:
C<-photor(lambda.max=c(350))
##Grey background
##with 7 percent reflectance from 300 to 700nm:
Rb <- data.frame(300:700, rep(7, length(300:700)))
## Read CIE D65 standard illuminant:
data("D65")
##Reflectance data of R1 and R2
R1.1<-logistic(x=seq(300,700,1), x0=500, L=50, k=0.04)
R1.2<-logistic(x=seq(300,700,1), x0=400, L=50, k=0.04)
w<-R1.1[,1]
R1.1<-R1.1[,2]+10
R1.2<-R1.2[,2]+10
R1<-data.frame(w=w, R1.1=R1.1, R1.2=R1.2)
R2<-logistic(x=seq(300,700,1), x0=550, L=50, k=0.04)
R2[,2]<-R2[,2]+10
plot(R1[,c(1,2)],type="l",
ylim=c(0,60))
lines(R1[,c(1,3)])
lines(R2[,c(1,2)],col="red")
lines(Rb,col="green")
## Run model
RNLachrom(model="log",
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
RNLmodel(model="log",
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
## Run model
RNLachrom(model="log",
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
## Run model
RNLachrom(model="log",
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
## Run model
RNLachrom(model="log",
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
## Run model
RNLachrom(model="log",
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
## Run model
RNLachrom(model="log",
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
## Run model
RNLachrom(model="log",
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
## Run model
RNLachrom(model="log",
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = c(0.1, 0.16))
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = 0.16)
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = c(0.1, 0.16))
## Run model
RNLachrom(model="log",
R1=R1, R2=R2, Rb=Rb, I=D65, C=C,
e = c(0.1, 0.16))
RNLmodel(model="log", noise=TRUE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C[,c(1,2,2)],
e = c(0.1, 0.16))
RNLmodel(model="log", noise=FALSE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C[,c(1,2,2)],
e = c(0.1, 0.16), n=c(2,5), v=0.1)
RNLmodel(model="log", noise=FALSE,
R1=R1, R2=R2, Rb=Rb, I=D65, C=C[,c(1,2,2)],
e = c(0.1, 0.16), n=c(2,5), v=c(NA,0.1))
log(5-2) - log(2)
log(5-2)
log(5/2)
log(5-2) - log(2)
log(5-2)
log(5-2) - log(2)
#(q1-q2)/q2
#log(q1-q2) - log(q2)
#log(5-2) - log(2)
log(5/2)
(5-2)/2
#(q1-q2)/q2
#log(q1-q2) - log(q2)
#log(5-2) - log(2)
log(3/2)
(3-2)/2
#(q1-q2)/q2
#log(q1-q2) - log(q2)
#log(5-2) - log(2)
log(2.1/2)
(2.1-2)/2
#(q1-q2)/q2
#log(q1-q2) - log(q2)
#log(5-2) - log(2)
log(2.1/2)
(2.1-2)/2
#(q1-q2)/q2
#log(q1-q2) - log(q2)
#log(5-2) - log(2)
log(2.1/2)
(2.1-2)/2
#(q1-q2)/q2
#log(q1-q2) - log(q2)
#log(5-2) - log(2)
log(2.1/2)
(2.1-2)/2
e_values<-noise_e(noise=FALSE, v=0.1, n=c(1, 3, 4.2, 4))
e_values
round(e_values[[3]],4
)
remove.packages("colourvision", lib="~/Library/R/arm64/4.3/library")
remove.packages("colourvision", lib="/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library")
detach("package:colourvision", unload = TRUE)
library(colourvision)
remove.packages("colourvision", lib="~/Library/R/arm64/4.3/library")
