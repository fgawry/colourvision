#Euv<-seq(from=0, to=1, by=0.1)
#
#x1<-NULL
#y1<-NULL
#z1<-NULL
#s1<-NULL
#
#for (r in 1:length(Er)) {
#  for (g in 1:length(Eg)) {
#    for (b in 1:length(Eb)) {
#     for (u in 1:length(Euv)) {
#x.tmp <- ((2*sqrt(2))/3)* 0.866025404 * (Eg[[g]]-Er[[r]])
#x1<-c(x1, x.tmp)
#y.tmp <- Euv[[u]] - (1/3)*(Eb[[b]]+Eg[[g]]+Er[[r]])
#y1<-c(y1, y.tmp)
#z.tmp <- ((2*sqrt(2))/3) * ( ( 0.5*(Eg[[g]]+Er[[r]]) ) - Eb[[b]])
#z1<-c(z1, z.tmp)
#s1.tmp<-sqrt( x.tmp^2 + y.tmp^2 + z.tmp^2 )
#s1<-c(s1, s1.tmp)
#x1.tmp <- sin(3/pi)*(Eg[[g]]-Euv[[u]])
#x1<-c(x1, x.tmp)
#y1.tmp <- Eb[[b]]-0.5*(Eg[[g]]+Euv[[u]])
#y1<-c(y1, y.tmp)
#  print(r)
#
#        }}}}
#xx<-x1[s1>=1]
#yy<-y1[s1>=1]
#zz<-z1[s1>=1]
#ss<-s1[s1>=1]
#library(rgl)
#plot3d(x=xx,y=yy,z=zz, col = "red", type = "p",
#       xlim=c(-1,1), ylim=c(-1,1), zlim=c(-1,1))
#text3d(x=xx, y=yy, z=zz, texts=1:length(xx), cex=.75)
#vertex<-c(1,6,26,43,97,80,117,122,10,30,39,84,93,113)
#length(vertex)
#plot3d(x=xx[vertex],y=yy[vertex],z=zz[vertex], col = "grey", type = "p",
#       xlim=c(-1,1), ylim=c(-1,1), zlim=c(-1,1), size=2, box=F, axes=F,
#       xlab="", ylab="", zlab="")
#plot3d(x=x1,y=y1,z=z1, col = "blue", type = "p", add=F)
CTTKhexagon3D <- function (x,y,z, type = "p", s.col="red", radius=0.01, f.col="grey") {
requireNamespace("rgl")
plot3d(x=x,y=x,z=z, col = s.col, type = type, add=F,
xlab = "", ylab="", zlab="",
box=F, axes=F, radius=radius, ylim=c(-1,1), xlim=c(-1,1), zlim=c(-1,1),
aspect = T)
#Photoreceptor vector vertices
E4<-c(-0.8164966, -0.3333333,  0.4714045)
E3<-c( 0.8164966, -0.3333333,  0.4714045)
E2<-c( 0.0000000, -0.3333333, -0.9428090)
E1<-c( 0.0000000,  1.0000000,  0.0000000)
#Hexagonal trapezohedron vertices
x.vertex<-c(0.0000000,  0.0000000,  0.8164966,
0.8164966, -0.8164966, -0.8164966,
0.0000000,  0.0000000,  0.0000000,
0.8164966, 0.8164966, -0.8164966, -0.8164966,  0.0000000)
y.vertex<-c(1.0000000, -0.3333333, -0.3333333,
0.3333333,  0.3333333, -0.3333333,
0.3333333, -1.0000000,  0.6666667,
0.6666667, -0.6666667,  0.6666667, -0.6666667, -0.6666667)
z.vertex<-c(0.0000000, -0.9428090,  0.4714045,
-0.4714045, -0.4714045,  0.4714045,
0.9428090,  0.0000000, -0.9428090,
0.4714045, -0.4714045,  0.4714045, -0.4714045,  0.9428090)
plot3d(x=x.vertex[c(1,10)],y=y.vertex[c(1,10)],z=z.vertex[c(1,10)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(1,9)],y=y.vertex[c(1,9)],z=z.vertex[c(1,9)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(1,12)],y=y.vertex[c(1,12)],z=z.vertex[c(1,12)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(5,9)],y=y.vertex[c(5,9)],z=z.vertex[c(5,9)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(5,12)],y=y.vertex[c(5,12)],z=z.vertex[c(5,12)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(6,12)],y=y.vertex[c(6,12)],z=z.vertex[c(6,12)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(7,12)],y=y.vertex[c(7,12)],z=z.vertex[c(7,12)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(7,10)],y=y.vertex[c(7,10)],z=z.vertex[c(7,10)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(7,14)],y=y.vertex[c(7,14)],z=z.vertex[c(7,14)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(3,10)],y=y.vertex[c(3,10)],z=z.vertex[c(3,10)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(3,14)],y=y.vertex[c(3,14)],z=z.vertex[c(3,14)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(6,14)],y=y.vertex[c(6,14)],z=z.vertex[c(6,14)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(8,14)],y=y.vertex[c(8,14)],z=z.vertex[c(8,14)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(8,13)],y=y.vertex[c(8,13)],z=z.vertex[c(8,13)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(8,11)],y=y.vertex[c(8,11)],z=z.vertex[c(8,11)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(5,13)],y=y.vertex[c(5,13)],z=z.vertex[c(5,13)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(2,9)],y=y.vertex[c(2,9)],z=z.vertex[c(2,9)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(2,11)],y=y.vertex[c(2,11)],z=z.vertex[c(2,11)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(4,11)],y=y.vertex[c(4,11)],z=z.vertex[c(4,11)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(4,9)],y=y.vertex[c(4,9)],z=z.vertex[c(4,9)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(4,10)],y=y.vertex[c(4,10)],z=z.vertex[c(4,10)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(2,13)],y=y.vertex[c(2,13)],z=z.vertex[c(2,13)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(6,13)],y=y.vertex[c(6,13)],z=z.vertex[c(6,13)], col = f.col, type = "l", add=T, lwd=1)
plot3d(x=x.vertex[c(3,11)],y=y.vertex[c(3,11)],z=z.vertex[c(3,11)], col = f.col, type = "l", add=T, lwd=1)
text3d(x=E1[[1]],y=E1[[2]],z=E1[[3]], texts="E1", cex=.75, adj=c(1,1))
text3d(x=E2[[1]],y=E2[[2]],z=E2[[3]], texts="E2", cex=.75, adj=c(1,1))
text3d(x=E3[[1]],y=E3[[2]],z=E3[[3]], texts="E3", cex=.75, adj=c(1,1))
text3d(x=E4[[1]],y=E4[[2]],z=E4[[3]], texts="E4", cex=.75, adj=c(1,1))
}
#Plot Endler's Triangle
#Plot Endler's Triangle
#Plot Endler's Triangle
#Plot Endler's Triangle
EMtriangle <- function (main = NULL,
ylim=c(-0.8,0.8),
xlim=c(-0.8,0.8)) {
plot(x=0,y=0, pch=16, bty="n",yaxt="n",xaxt="n", col="white",
ylim=ylim, xlim=xlim, asp=1, main=main, ann=FALSE)
polygon(
x=c((2/3)*((sqrt(3)/2)*(0-1)),
(2/3)*((sqrt(3)/2)*(0-0)),
(2/3)*((sqrt(3)/2)*(1-0))
),
y=c((2/3)*(0-0.5*(1+0)),
(2/3)*(1-0.5*(0+0)),
(2/3)*(0-0.5*(0+1))
)
)
legend(x=(2/3)*((sqrt(3)/2)*(0-1)),
y=(2/3)*(0-0.5*(1+0)),
legend = "u", bty="n", xjust=1, yjust=1)
legend(x=(2/3)*((sqrt(3)/2)*(0-0)),
y=(2/3)*(1-0.5*(0+0)),
legend = "s", bty="n", xjust=0.75, yjust=0)
legend(x=((2/3)*((sqrt(3)/2)*(1-0))),
y=(2/3)*(0-0.5*(0+1)),legend = "m",
bty="n", xjust=0.5, yjust=1)
}
#10
#Plot Endler's Tetrahedron
#Plot Endler's Tetrahedron
#Plot Endler's Tetrahedron
#Plot Endler's Tetrahedron
EMtetrahedron <- function (x,y,z, type = "p", s.col="red", radius=0.01, f.col="black") {
requireNamespace("rgl")
rgl.viewpoint(  zoom = .75 )
plot3d(x=x,y=x,z=z, col = s.col, type = type, add=F,
xlab = "", ylab="", zlab="",
box=F, axes=F, radius=radius, ylim=c(-0.75,0.75), xlim=c(-0.75,0.75), zlim=c(-0.75,0.75),
aspect = T, mar=c(1,1,1,1))
smu <- function (s,m,u,l) {
x <- ((1-2*s-m-u)/2)*sqrt(3/2)
y <- (-1+3*m+u)/(2*sqrt(2))
z <- u - 1/4
r<-c(x,y,z)
names(r)<-c("x","y","z")
return(r)
}
plot3d(x=c(smu(1,0,0)[["x"]],smu(0,0,0)[["x"]]),
y=c(smu(1,0,0)[["y"]],smu(0,0,0)[["y"]]),
z=c(smu(1,0,0)[["z"]],smu(0,0,0)[["z"]]),
col = f.col, type = "l", add=T, lwd=1)
plot3d(x=c(smu(0,0,0)[["x"]],smu(0,0,1)[["x"]]),
y=c(smu(0,0,0)[["y"]],smu(0,0,1)[["y"]]),
z=c(smu(0,0,0)[["z"]],smu(0,0,1)[["z"]]),
col = f.col, type = "l", add=T, lwd=1)
plot3d(x=c(smu(1,0,0)[["x"]],smu(0,0,1)[["x"]]),
y=c(smu(1,0,0)[["y"]],smu(0,0,1)[["y"]]),
z=c(smu(1,0,0)[["z"]],smu(0,0,1)[["z"]]),
col = f.col, type = "l", add=T, lwd=1)
plot3d(x=c(smu(0,1,0)[["x"]],smu(0,0,1)[["x"]]),
y=c(smu(0,1,0)[["y"]],smu(0,0,1)[["y"]]),
z=c(smu(0,1,0)[["z"]],smu(0,0,1)[["z"]]),
col = f.col, type = "l", add=T, lwd=1)
plot3d(x=c(smu(0,1,0)[["x"]],smu(0,0,0)[["x"]]),
y=c(smu(0,1,0)[["y"]],smu(0,0,0)[["y"]]),
z=c(smu(0,1,0)[["z"]],smu(0,0,0)[["z"]]),
col = f.col, type = "l", add=T, lwd=1)
plot3d(x=c(smu(0,1,0)[["x"]],smu(1,0,0)[["x"]]),
y=c(smu(0,1,0)[["y"]],smu(1,0,0)[["y"]]),
z=c(smu(0,1,0)[["z"]],smu(1,0,0)[["z"]]),
col = f.col, type = "l", add=T, lwd=1)
text3d(x=smu(1,0,0)[["x"]],y=smu(1,0,0)[["y"]],z=smu(1,0,0)[["z"]], texts="u", cex=1, adj=c(0,0))
text3d(x=smu(0,1,0)[["x"]],y=smu(0,1,0)[["y"]],z=smu(0,1,0)[["z"]], texts="s", cex=1, adj=c(1,1))
text3d(x=smu(0,0,1)[["x"]],y=smu(0,0,1)[["y"]],z=smu(0,0,1)[["z"]], texts="m", cex=1, adj=c(1,1))
text3d(x=smu(0,0,0)[["x"]],y=smu(0,0,0)[["y"]],z=smu(0,0,0)[["z"]], texts="l", cex=1, adj=c(1,1))
}
#CIE Human colour perception
#x: CIE 1931 Colour matching function x
#y: CIE 1931 Colour matching function y
#z: CIE 1931 Colour matching function z
#x,y,z functions available in http://www.cie.co.at/publ/abst/datatables15_2004/CIE_sel_colorimetric_tables.xls
#r: reflectance spectrum
#plot: plot human colour
#rgb: RGB colour space to be used for conversion from XYZ to RGB
CIEXYZ<-function (fx,
fy,
fz,
I,
R,
plot=FALSE) {
nm<-seq(400,700,1)
x1<-approx(x = fx[,1], y = fx[,2], xout = nm, method="linear")
y1<-approx(x = fy[,1], y = fy[,2], xout = nm, method="linear")
z1<-approx(x = fz[,1], y = fz[,2], xout = nm, method="linear")
r1<-approx(x = R[,1], y = R[,2], xout = nm, method="linear")
I1<-approx(x = I[,1], y = I[,2], xout = nm, method="linear")
i<-r1$y*I1$y
N<-sum(y1$y*I1$y, na.rm = T)
X<-sum(x1$y*i, na.rm = T)/N
Y<-sum(y1$y*i, na.rm = T)/N
Z<-sum(z1$y*i, na.rm = T)/N
#chromaticity coordinates:
#CIExyY
x<-X/(X+Y+Z)
y<-Y/(X+Y+Z)
z<-Z/(X+Y+Z)
Y<-Y
requireNamespace("grDevices")
requireNamespace("colorspace")
rgb1<-coords(as(XYZ(X,Y,Z), "sRGB"))
rgb1[rgb1<0]<-0
rgb1[rgb1>1]<-1
colour.name<-rgb(red=rgb1[[1]], green=rgb1[[2]], blue=rgb1[[3]], maxColorValue=1)
if(plot==TRUE) {
plot(R, xlim=c(300,700), type="l")
points(y=max(R[,2])-max(R[,2])/10, x=320,
col=colour.name, bg=colour.name, cex=10, pch=21)
}
result<-data.frame(X,Y,Z,x,y,z,rgb1[[1]],rgb1[[2]],rgb1[[3]],colour.name)
names(result)<-c("X","Y","Z","x","y","z","R","G","B","colour.name")
return(result)
}
#hexa.density <- function(data=flower,
#                         x.cell=0.05,
#                         y.cell=0.05,
#                         xlim=c(-1,1.001),
#                         ylim=c(-1,1.001),
#                         sty = "quantile",
#                         nclr = 5,
#                         namecol = "OrRd"
#)  {
#
#  require(RColorBrewer)
#  require(classInt)
#
#  x<-seq(from=xlim[[1]], to=xlim[[2]], by=x.cell)
#  y<-seq(from=ylim[[1]], to=ylim[[2]], by=y.cell)
#
#  x.mid<-x+x.cell/2
#  x.mid<-x.mid[1:(length(x.mid)-1)]
#  y.mid<-y+y.cell/2
#  y.mid<-y.mid[1:(length(y.mid)-1)]
#
#  matrix.xy<-matrix(ncol=length(x.mid),nrow=length(y.mid))
#
#  colnames(matrix.xy)<-paste(x.mid)
#  rownames(matrix.xy)<-paste(y.mid)
#
#  for (i in 1:(length(x)-1)) {
#    for (k in 1:(length(y)-1)) {
#      x1<-x[[i]]
#      x2<-x[[i+1]]
#      y1<-y[[k]]
#      y2<-y[[k+1]]
#      data.sub<-subset(data, data[,1]>=x1)
#      data.sub<-subset(data.sub, data.sub[,1]<x2)
#      data.sub<-subset(data.sub, data.sub[,2]>=y1)
#      data.sub<-subset(data.sub, data.sub[,2]<y2)
#      matrix.xy[i,k]<-nrow(data.sub)
#    }
#  }
#
#  plotvar <- as.numeric(matrix.xy)
#  plotvar[plotvar==0]<-NA
#  nclr <- nclr
#  plotclr <- brewer.pal(nclr,name = namecol)
#  class <- classIntervals(var = plotvar, n = nclr, style = sty)
#  colcode <- findColours(class, plotclr)
#  heat.matrix.colours<-matrix.xy
#  heat.matrix.colours<-matrix(colcode, ncol = ncol(heat.matrix.colours),
#                            nrow = nrow(heat.matrix.colours))
#
#  plot.hexagon()
#  for(i in 1:length(colnames(matrix.xy))) {
#    for (k in 1:length(rownames(matrix.xy))){
#      points(x=as.numeric(rownames(matrix.xy)[[k]]),
#             y=as.numeric(colnames(matrix.xy)[[i]]),
#             col = heat.matrix.colours[k,i],
#             bg = heat.matrix.colours[k,i],
#             pch = 22,
#             cex = 1.4)
#    }
#  }
#}
CTTKhexagon
RNLmodel
??coords
requireNamespace("colorspace")
rgb1<-coords(as(XYZ(X,Y,Z), "sRGB"))
coords
colorspace
CIEXYZ<-function (fx,
fy,
fz,
I,
R,
plot=FALSE) {
nm<-seq(400,700,1)
x1<-approx(x = fx[,1], y = fx[,2], xout = nm, method="linear")
y1<-approx(x = fy[,1], y = fy[,2], xout = nm, method="linear")
z1<-approx(x = fz[,1], y = fz[,2], xout = nm, method="linear")
r1<-approx(x = R[,1], y = R[,2], xout = nm, method="linear")
I1<-approx(x = I[,1], y = I[,2], xout = nm, method="linear")
i<-r1$y*I1$y
N<-sum(y1$y*I1$y, na.rm = T)
X<-sum(x1$y*i, na.rm = T)/N
Y<-sum(y1$y*i, na.rm = T)/N
Z<-sum(z1$y*i, na.rm = T)/N
#chromaticity coordinates:
#CIExyY
x<-X/(X+Y+Z)
y<-Y/(X+Y+Z)
z<-Z/(X+Y+Z)
Y<-Y
requireNamespace("grDevices")
requireNamespace("colorspace")
rgb1<-coords(as(XYZ(X,Y,Z), "sRGB"))
rgb1[rgb1<0]<-0
rgb1[rgb1>1]<-1
colour.name<-rgb(red=rgb1[[1]], green=rgb1[[2]], blue=rgb1[[3]], maxColorValue=1)
if(plot==TRUE) {
plot(R, xlim=c(300,700), type="l")
points(y=max(R[,2])-max(R[,2])/10, x=320,
col=colour.name, bg=colour.name, cex=10, pch=21)
}
result<-data.frame(X,Y,Z,x,y,z,rgb1[[1]],rgb1[[2]],rgb1[[3]],colour.name)
names(result)<-c("X","Y","Z","x","y","z","R","G","B","colour.name")
return(result)
}
CIEXYZ(fx=ciexyz1931[,c(1,2)],
fy=ciexyz1931[,c(1,3)],
fz=ciexyz1931[,c(1,4)],
R=logistic(x=seq(300,700,1), x0=550, L=80, k=0.5),
I=D65,
plot=TRUE)
}
CIEXYZ(fx=ciexyz1931[,c(1,2)],
fy=ciexyz1931[,c(1,3)],
fz=ciexyz1931[,c(1,4)],
R=logistic(x=seq(300,700,1), x0=550, L=80, k=0.5),
I=D65,
plot=TRUE)
require(colorspace)
CIEXYZ(fx=ciexyz1931[,c(1,2)],
fy=ciexyz1931[,c(1,3)],
fz=ciexyz1931[,c(1,4)],
R=logistic(x=seq(300,700,1), x0=550, L=80, k=0.5),
I=D65,
plot=TRUE)
?requireNamespace
loadNamespace("colorspace")
detach("package:colorspace", unload=TRUE)
loadNamespace("colorspace")
requireNamespace("colorspace")
require("colorspace")
require("grDevices")
require("colorspace")
?requireNamespace
?showNonASCIIfile
dir()
dir("~/CRAN/")
getwd()
dir("/Users/Felipe/Documents/Felipe Virtual/UFG/Manuscripts/Colour Vision Model Simulations/CRAN")
dir("/Users/Felipe/Documents/Felipe Virtual/UFG/Manuscripts/Colour Vision Model Simulations/CRAN/colourvision")
f<-dir("/Users/Felipe/Documents/Felipe Virtual/UFG/Manuscripts/Colour Vision Model Simulations/CRAN/colourvision/man")
setwd("/Users/Felipe/Documents/Felipe Virtual/UFG/Manuscripts/Colour Vision Model Simulations/CRAN/colourvision/man")
f<-dir()
showNonASCIIfile(f[[1]])
library(tools)
showNonASCIIfile(f[[1]])
showNonASCIIfile(f[[2]])
showNonASCIIfile(f[[3]])
showNonASCIIfile(f[[4]])
showNonASCIIfile(f[[5]])
f[[1]]
showNonASCIIfile(f[[1]])
showNonASCIIfile(f[[1]])
showNonASCIIfile(f[[4]])
f[[4]]
showNonASCIIfile(f[[5]])
showNonASCIIfile(f[[6]])
showNonASCIIfile(f[[6]])
showNonASCIIfile(f[[7]])
showNonASCIIfile(f[[8]])
showNonASCIIfile(f[[8]])
showNonASCIIfile(f[[8]])
showNonASCIIfile(f[[9]])
showNonASCIIfile(f[[9]])
showNonASCIIfile(f[[10]])
showNonASCIIfile(f[[10]])
showNonASCIIfile(f[[11]])
showNonASCIIfile(f[[11]])
showNonASCIIfile(f[[12]])
showNonASCIIfile(f[[12]])
showNonASCIIfile(f[[13]])
showNonASCIIfile(f[[14]])
showNonASCIIfile(f[[14]])
showNonASCIIfile(f[[15]])
showNonASCIIfile(f[[16]])
showNonASCIIfile(f[[16]])
showNonASCIIfile(f[[17]])
showNonASCIIfile(f[[18]])
showNonASCIIfile(f[[19]])
showNonASCIIfile(f[[19]])
showNonASCIIfile(f[[20]])
colorspace::coords(as(XYZ(X,Y,Z), "sRGB"))
?rgb
install.packages("~/Documents/Felipe Virtual/UFG/Manuscripts/Colour Vision Model Simulations/CRAN/colourvision_1.0.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("colourvision", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
data(D65)
plot(D65)
data(bee)
bee
data(Rb)
plot(Rb)
## Create teoretical photoreceptor absorbance
## values with lambda max at 350nm, 450nm and 550nm:
C1<-photor(lambda.max=350)
C2<-photor(lambda.max=450)
C3<-photor(lambda.max=550)
## Create teoretical grey background:
## with 10 percent. reflectance from 300 to 700nm:
Rb <- data.frame(300:700, rep(10, length(300:700)))
## Read CIE D65 standard illuminant already converted to quantum flux:
data("D65")
## Create teoretical reflectance data
## with a sigmoid spectrum with midpoint at 500nm
R<-logistic(x=seq(300,700,1), x0=500, L=50, k=0.04)
## Run Chittka (1992) colour vision model:
CTTKmodel(photo="tri", R=R, I=D65,
Rb=Rb, C1=C1, C2=C2, C3=C3)
## Create teoretical photoreceptor absorbance
## values with lambda max at 350nm, 450nm and 550nm:
C1<-photor(lambda.max=350)
C2<-photor(lambda.max=450)
C3<-photor(lambda.max=550)
## Create teoretical grey background
## with 10 percent reflectance from 300 to 700nm:
Rb <- data.frame(300:700, rep(10, length(300:700)))
## Read CIE D65 standard illuminant
## and convert values to quantum flux:
data("D65")
## Create teoretical reflectance data
## with a sigmoid spectrum with midpoint at 500nm
R<-logistic(x=seq(300,700,1), x0=500, L=50, k=0.04)
## Run model
datum<-CTTKmodel(photo="tri", R=R, I=D65,
Rb=Rb, C1=C1, C2=C2, C3=C3)
##plot hexagon and one data point:
CTTKhexagon()
points(x=datum[["x"]],y=datum[["y"]],
col="blue", cex=2, pch=20)
CTTKhexagon3D(x=0,y=0,z=0)
## Create teoretical photoreceptor absorbance
## values with lambda max at 350nm, 450nm and 550nm:
C1<-photor(lambda.max=350)
C2<-photor(lambda.max=450)
C3<-photor(lambda.max=550)
## Create teoretical grey background
## with 10 percent reflectance from 300 to 700nm:
Rb <- data.frame(300:700, rep(10, length(300:700)))
## Read CIE D65 standard illuminant
data("D65")
## Create teoretical reflectance data
## with a sigmoid spectrum with midpoint at 500nm
R<-logistic(x=seq(300,700,1), x0=500, L=50, k=0.04)
## Run model
CTTKmodel(photo="tri", R=R, I=D65,
Rb=Rb, C1=C1, C2=C2, C3=C3)
## Create teoretical photoreceptor absorbance
## values with lambda max at 350nm, 450nm and 550nm:
C1<-photor(lambda.max=350)
C2<-photor(lambda.max=450)
C3<-photor(lambda.max=550)
## Create teoretical grey background
## with 10 percent reflectance from 300 to 700nm:
Rb <- data.frame(300:700, rep(10, length(300:700)))
## Read CIE D65 standard illuminant
data("D65")
## Create teoretical reflectance data
## with a sigmoid spectrum with midpoint at 500nm
R<-logistic(x=seq(300,700,1), x0=500, L=50, k=0.04)
R[,2]<-R[,2]+10
## Run model
EMmodel(photo="tri",
R=R, I=D65, Rb=Rb, C1=C1, C2=C2, C3=C3)
EMtetrahedron(x=0,y=0,z=0)
EMtriangle()
points(x=0,y=0, pch=16, col="red")
l<-logistic(x=seq(300,700,1), x0=650, L=50, k=0.04)
plot(l, type="l")
## Create teoretical photoreceptor absorbance
## values with lambda max at 350nm, 450nm and 550nm:
C1<-photor(lambda.max=350)
C2<-photor(lambda.max=450)
C3<-photor(lambda.max=550)
plot(C1, type="l", col="violet")
lines(C2, type="l", col="blue")
lines(C3, type="l", col="green")
## Create teoretical photoreceptor absorbance
## values with lambda max at 350nm, 450nm and 550nm:
C1<-photor(lambda.max=350)
C2<-photor(lambda.max=450)
C3<-photor(lambda.max=550)
## Create teoretical grey background
## with 10 percent reflectance from 300 to 700nm:
Rb <- data.frame(300:700, rep(10, length(300:700)))
## Read CIE D65 standard illuminant:
data("D65")
## Create teoretical reflectance data
## with a sigmoid spectrum with midpoint at 500nm
R<-logistic(x=seq(300,700,1), x0=500, L=50, k=0.04)
## Run model
RNLmodel(photo="tri", model="log",
R1=R, R2=Rb, I=D65, Rb=Rb, C1=C1, C2=C2, C3=C3, noise=TRUE, e = c(0.13, 0.06, 0.12))
remove.packages("colourvision", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("devtools", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
